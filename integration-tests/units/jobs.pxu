id: snapcraft/normal/no-yaml
plugin: shell
estimated_duration: 0.1
command:
    set -x
    OUTPUT=$(${SNAPCRAFT} pull)
    test $? = 1 || exit 1
    echo $OUTPUT | grep "Could not find snapcraft\.yaml\."

id: snapcraft/normal/assemble-no-meta
plugin: shell
estimated_duration: 0.3
command:
    set -x
    cp -rT $PLAINBOX_PROVIDER_DATA/assemble .
    OUTPUT=$(${SNAPCRAFT} assemble)
    test $? = 1 || exit 1
    echo $OUTPUT | grep "Missing snappy metadata file"

id: snapcraft/normal/assemble-meta-externally
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/assemble .
    # Test that as long as we have meta/ from *somewhere*, assemble doesn't
    # care where (and you don't need snappy-metadata to find it)
    touch copy-meta # instructs Makefile to copy snappy/ itself
    ${SNAPCRAFT} assemble

id: snapcraft/normal/assemble-meta
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/assemble .
    echo "snappy-metadata: snappy" >> snapcraft.yaml
    ${SNAPCRAFT} assemble
    test -e "assemble_1.0_$(dpkg-architecture -qDEB_TARGET_ARCH).snap"
    sed -i "s/@ARCH@/$(dpkg-architecture -qDEB_TARGET_ARCH)/g" package.yaml.after
    diff -u package.yaml.after snap/meta/package.yaml
    sed -i "s/@MULTIARCH@/$(dpkg-architecture -qDEB_TARGET_MULTIARCH)/g" binary1.after
    diff -u binary1.after snap/binary1.wrapper
    export SNAP_APP_PATH=`pwd`/snap
    test "$(./snap/service-start.wrapper)" = "service-start"
    test "$(./snap/service-stop.wrapper)" = "service-stop"
    test "$(./snap/binary1.wrapper)" = "binary1"
    test "$(./snap/subdir/binary2.wrapper)" = "binary2"
    if ./snap/bin/not-wrapped; then
        exit 1
    fi
    if [ -e ./snap/bin/not-wrapped.wrapper ]; then
        exit 1
    fi

id: snapcraft/normal/local-source
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/local-source .
    ${SNAPCRAFT} build
    test -e stamp-all
    test "$(readlink parts/make-project/build)" = "$(pwd)"
    ${SNAPCRAFT} stage
    test -e stamp-install

id: snapcraft/normal/local-plugin
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/local-plugin .
    ${SNAPCRAFT} stage
    test -e stage/build-stamp

id: snapcraft/normal/simple-tar
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/simple-tar .
    ${SNAPCRAFT} stage
    test -e stage/flat
    test -e stage/flatdir/flat2
    test -e stage/onedeep
    test -e stage/onedeepdir/onedeep2
    test -e stage/oneflat
    test -e stage/dir-simple
    test -e stage/top-simple
    test -e stage/notop
    test -e stage/notopdir
    test -e stage/parent
    test -e stage/slash
    test "$(./stage/bin/test)" = "tarproject"

id: snapcraft/normal/simple-make
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/simple-make .
    ${SNAPCRAFT} stage
    test "$(./stage/bin/test)" = "Hello world"

id: snapcraft/normal/simple-cmake
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/simple-cmake .
    ${SNAPCRAFT} stage
    test "$(./stage/bin/simple-cmake)" = "It's a CMake world"

id: snapcraft/normal/simple-copy
plugin: shell
estimated_duration: 0.5
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/simple-copy .
    ${SNAPCRAFT} stage
    test "$(cat ./stage/dst)" = "I got copied"

id: snapcraft/normal/conflicts
plugin: shell
estimated_duration: 0.3
command:
    set -x
    cp -rT $PLAINBOX_PROVIDER_DATA/conflicts .
    OUTPUT=$(${SNAPCRAFT} stage)
    test $? = 1 || exit 1
    echo $OUTPUT | grep "Error: parts p1 and p2 have the following files in common: bin/test" # squished output by bash

id: snapcraft/normal/dependencies
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/dependencies .
    ${SNAPCRAFT} stage
    test -x stage/bin/p3
    test "$(${SNAPCRAFT} shell p3)" = 'p1
    p1
    p2'

id: snapcraft/normal/dependencies-circular
plugin: shell
estimated_duration: 0.3
command:
    set -x
    cp -rT $PLAINBOX_PROVIDER_DATA/dependencies .
    sed -i "s/p1:/p1:\n    after: [p3]/" snapcraft.yaml
    OUTPUT=$(${SNAPCRAFT} pull)
    test $? = 1 || exit 1
    echo $OUTPUT | grep -i "circular dependency"

id: snapcraft/normal/dependencies-fail
plugin: shell
estimated_duration: 0.3
command:
    set -x
    cp -rT $PLAINBOX_PROVIDER_DATA/dependencies .
    sed -i '/after/d' snapcraft.yaml
    ${SNAPCRAFT} build
    test $? = 1 || exit 1

id: snapcraft/normal/bzr-head
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/bzr-head .
    bzr init .
    bzr whoami --branch "Example Dev <dev@example.com>"
    bzr commit -m "1" --unchanged
    bzr commit -m "2" --unchanged
    ${SNAPCRAFT} pull # test initial branch
    test "$(bzr revno -r -1 parts/bzr/src)" = "2"
    ${SNAPCRAFT} pull # test pull doesn't fail
    test "$(bzr revno -r -1 parts/bzr/src)" = "2"

id: snapcraft/normal/bzr-tag
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/bzr-tag .
    bzr init .
    bzr whoami --branch "Example Dev <dev@example.com>"
    bzr commit -m "1" --unchanged
    bzr commit -m "2" --unchanged
    bzr tag -r 1 initial
    ${SNAPCRAFT} pull # test initial branch
    test "$(bzr revno -r -1 parts/bzr/src)" = "1"
    ${SNAPCRAFT} pull # test pull doesn't fail
    test "$(bzr revno -r -1 parts/bzr/src)" = "1"

id: snapcraft/normal/git-head
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/git-head .
    git init .
    git config --local user.name "Example Dev"
    git config --local user.email dev@example.com
    git commit -m "1" --allow-empty
    git commit -m "2" --allow-empty
    ${SNAPCRAFT} pull
    test "$(git -C parts/git/src log -1 --oneline | cut -d' ' -f2)" = "2"
    ${SNAPCRAFT} pull
    test "$(git -C parts/git/src log -1 --oneline | cut -d' ' -f2)" = "2"

id: snapcraft/normal/git-tag
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/git-tag .
    git init .
    git config --local user.name "Example Dev"
    git config --local user.email dev@example.com
    git commit -m "1" --allow-empty
    git commit -m "2" --allow-empty
    git tag initial HEAD@{1}
    ${SNAPCRAFT} pull
    test "$(git -C parts/git/src log -1 --oneline | cut -d' ' -f2)" = "1"
    ${SNAPCRAFT} pull
    test "$(git -C parts/git/src log -1 --oneline | cut -d' ' -f2)" = "1"

id: snapcraft/normal/git-branch
plugin: shell
estimated_duration: 0.3
command:
    set -ex
    cp -rT $PLAINBOX_PROVIDER_DATA/git-branch .
    git init .
    git config --local user.name "Example Dev"
    git config --local user.email dev@example.com
    git commit -m "1" --allow-empty
    git commit -m "2" --allow-empty
    git branch second HEAD@{1}
    git checkout second
    git commit -m "3" --allow-empty
    git checkout master
    ${SNAPCRAFT} pull
    test "$(git -C parts/git/src log -2 --oneline | cut -d' ' -f2 | tr '\n' ' ')" = "3 1 "
    ${SNAPCRAFT} pull
    test "$(git -C parts/git/src log -2 --oneline | cut -d' ' -f2 | tr '\n' ' ')" = "3 1 "
